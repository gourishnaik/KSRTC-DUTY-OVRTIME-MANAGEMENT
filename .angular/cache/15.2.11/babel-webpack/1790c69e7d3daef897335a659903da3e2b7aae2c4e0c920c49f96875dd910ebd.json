{"ast":null,"code":"import { switchMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ApiCallsService = /*#__PURE__*/(() => {\n  class ApiCallsService {\n    constructor(http) {\n      this.http = http;\n      this.jsonapiEndpointUrl = 'http://localhost:3000/Createtask';\n    }\n    createTask(taskData) {\n      return this.http.post(this.jsonapiEndpointUrl, taskData);\n    }\n    getTasks() {\n      return this.http.get(this.jsonapiEndpointUrl);\n    }\n    getTaskById(taskId) {\n      return this.http.get(`${this.jsonapiEndpointUrl}/${taskId}`);\n    }\n    updateTask(updatedTaskData) {\n      return this.http.put(`${this.jsonapiEndpointUrl}/${updatedTaskData.id}`, updatedTaskData);\n    }\n    deleteDuty(taskId, dutyId) {\n      // Step 1: Fetch the task\n      return this.http.get(`${this.jsonapiEndpointUrl}/${taskId}`).pipe(switchMap(task => {\n        // Step 2: Remove the duty\n        const updatedDuties = {};\n        Object.entries(task).forEach(([key, value]) => {\n          if (typeof value === 'object' && value.dutyId !== dutyId) {\n            updatedDuties[key] = value; // Type assertion\n          }\n        });\n        // Step 3: Update the task\n        const updatedTask = {\n          ...task,\n          ...updatedDuties\n        };\n        // Send the updated task back to the server\n        return this.http.put(`${this.jsonapiEndpointUrl}/${taskId}`, updatedTask);\n      }));\n    }\n    checkIfEmployeeIdExists(employeeId) {\n      return this.http.get(`${this.jsonapiEndpointUrl}?id=${employeeId}`);\n    }\n    static #_ = this.ɵfac = function ApiCallsService_Factory(t) {\n      return new (t || ApiCallsService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ApiCallsService,\n      factory: ApiCallsService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ApiCallsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}